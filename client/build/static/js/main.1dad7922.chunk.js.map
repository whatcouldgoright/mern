{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","createThought","thought","prompt","axios","post","then","res","setState","thoughts","state","data","newThought","catch","err","alert","JSON","stringify","deleteThoughts","window","confirm","delete","seedThoughts","get","this","className","onClick","map","thoughtModel","style","listStyleType","margin","borderBottom","_id","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQA4EeA,E,kDAvEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAqCRC,cAAgB,WACd,IAAMC,EAAUC,OAAO,wBAClBD,GACLE,IACGC,KAAK,uBAAwB,CAAEH,YAC/BI,MAAK,SAAAC,GAAG,OAAI,EAAKC,SAAS,CAAEC,SAAS,GAAD,mBAAM,EAAKC,MAAMD,UAAjB,CAA2BF,EAAII,KAAKC,kBACxEC,OAAM,SAAAC,GAAG,OAAIC,MAAM,6BAAD,OAA8BC,KAAKC,UAAUH,SA5CjD,EA+CnBI,eAAiB,WACEC,OAAOC,QAAQ,yBAEhChB,IACGiB,OAAO,kBACPf,MAAK,SAAAC,GAAG,OAAI,EAAKC,SAAS,CAAEC,SAAU,QACtCI,OAAM,SAAAC,GAAG,OAAIC,MAAM,kCAAD,OAAmCC,KAAKC,UAAUH,SArDtD,EAwDnBQ,aAAe,WACEH,OAAOC,QAAQ,qCAE9BhB,IACGC,KAAK,qBAAsB,IAC3BC,MAAK,WACJF,IACGmB,IAAI,kBACJjB,MAAK,SAAAC,GAAG,OAAI,EAAKC,SAAS,CAAEC,SAAUF,EAAII,UAC1CE,MAAME,UAEVF,MAAME,QAjET,EAAKL,MAAQ,CACXD,SAAU,IAHK,E,qDAOnB,WAAqB,IAAD,OAClBL,IACGmB,IAAI,kBACJjB,MAAK,SAAAC,GAAG,OAAI,EAAKC,SAAS,CAAEC,SAAUF,EAAII,UAC1CE,MAAME,S,oBAGX,WAAU,IACAN,EAAae,KAAKd,MAAlBD,SAER,OACE,sBAAKgB,UAAU,MAAf,UAEE,wBAAQC,QAASF,KAAKvB,cAAtB,4BACA,wBAAQyB,QAASF,KAAKN,eAAtB,6BACA,wBAAQQ,QAASF,KAAKF,aAAtB,2BAEA,6BACGb,EAASkB,KAAI,SAAAC,GAAY,OACxB,oBACEC,MAAO,CAAEC,cAAe,OAAQC,OAAQ,OAAQC,aAAc,mBADhE,SAIGJ,EAAa1B,SAFT0B,EAAaK,iB,GA7BdC,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB/B,MAAK,YAAkD,IAA/CgC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1dad7922.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      thoughts: [],\n    };\n  }\n\n  componentDidMount() {\n    axios\n      .get('/api/thoughts/')\n      .then(res => this.setState({ thoughts: res.data }))\n      .catch(alert);\n  }\n\n  render() {\n    const { thoughts } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* Buttons to interact with API */}\n        <button onClick={this.createThought}>Create Thought</button>\n        <button onClick={this.deleteThoughts}>Delete Thoughts</button>\n        <button onClick={this.seedThoughts}>Seed Thoughts</button>\n        {/* List of thoughts in Cosmos DB */}\n        <ul>\n          {thoughts.map(thoughtModel => (\n            <li\n              style={{ listStyleType: 'none', margin: '20px', borderBottom: '1px solid black' }}\n              key={thoughtModel._id}\n            >\n              {thoughtModel.thought}\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n\n  createThought = () => {\n    const thought = prompt('Enter your thought: ');\n    if (!thought) return;\n    axios\n      .post('/api/thoughts/create', { thought })\n      .then(res => this.setState({ thoughts: [...this.state.thoughts, res.data.newThought] }))\n      .catch(err => alert(`Failed to create thought\\n${JSON.stringify(err)}`));\n  };\n\n  deleteThoughts = () => {\n    const doDelete = window.confirm('Delete all Thoughts?');\n    if (!doDelete) return;\n    axios\n      .delete('/api/thoughts/')\n      .then(res => this.setState({ thoughts: [] }))\n      .catch(err => alert(`Failed to delete all thoughts\\n${JSON.stringify(err)}`));\n  };\n\n  seedThoughts = () => {\n    const doSeed = window.confirm('Do you want to seed random data?');\n    if (!doSeed) return;\n    axios\n      .post('/api/thoughts/seed', {})\n      .then(() => {\n        axios\n          .get('/api/thoughts/')\n          .then(res => this.setState({ thoughts: res.data }))\n          .catch(alert);\n      })\n      .catch(alert);\n  };\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}