{"version":3,"sources":["Components/Auth.js","App.js","reportWebVitals.js","index.js"],"names":["Auth","props","handleLogin","googleData","a","console","log","JSON","stringify","fetch","method","body","token","tokenId","headers","res","json","data","setState","user","state","className","clientId","buttonText","onSuccess","this","onFailure","cookiePolicy","name","Component","App","createThought","thought","prompt","axios","post","then","thoughts","newThought","catch","err","alert","deleteThoughts","window","confirm","delete","seedThoughts","get","onClick","map","thoughtModel","style","listStyleType","margin","borderBottom","_id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e12c95d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport GoogleLogin from 'react-google-login';\n\n\nclass Auth extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: null,\n    };\n  }\n\n  handleLogin = async googleData => {\n    console.log('googleData: ' + JSON.stringify(googleData, null, 2))\n    const res = await fetch(\"/api/auth/google\", {\n        method: \"POST\",\n        body: JSON.stringify({\n        token: googleData.tokenId\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n    const data = await res.json()\n    this.setState({ user: data })\n    console.log('user data: ' + JSON.stringify(data, null, 2));\n    // store returned user somehow\n  }\n\n  componentDidMount() {\n    // axios\n    //   .get('/api/thoughts/')\n    //   .then(res => this.setState({ thoughts: res.data }))\n    //   .catch(alert);\n  }\n\n  render() {\n    // const { thoughts } = this.state;\n\n    return (\n      <div className=\"Auth\">\n        <p>Auth</p>\n        <GoogleLogin\n          clientId='749218219448-s9jiqcnf7upjlf57q2ibcmaqo8pucjpp.apps.googleusercontent.com'\n          buttonText=\"Log in with Google\"\n          onSuccess={this.handleLogin}\n          onFailure={this.handleLogin}\n          cookiePolicy={'single_host_origin'}\n        />\n        <p>{this.state.user ? this.state.user.name : 'no user'}</p>\n      </div>\n    );\n  }\n}\n\nexport default Auth;\n\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\n\nimport Auth from './Components/Auth'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      thoughts: [],\n    };\n  }\n\n  componentDidMount() {\n    axios\n      .get('/api/thoughts/')\n      .then(res => this.setState({ thoughts: res.data }))\n      .catch(alert);\n  }\n\n  render() {\n    const { thoughts } = this.state;\n\n    return (\n      <div className=\"App\">\n\n        <Auth />\n\n        <br /><br /><br />\n        {/* Buttons to interact with API */}\n        <button onClick={this.createThought}>Create Thought</button>\n        <button onClick={this.deleteThoughts}>Delete Thoughts</button>\n        <button onClick={this.seedThoughts}>Seed Thoughts</button>\n        {/* List of thoughts in Cosmos DB */}\n        <ul>\n          {thoughts.map(thoughtModel => (\n            <li\n              style={{ listStyleType: 'none', margin: '20px', borderBottom: '1px solid black' }}\n              key={thoughtModel._id}\n            >\n              {thoughtModel.thought}\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n\n  createThought = () => {\n    const thought = prompt('Enter your thought: ');\n    if (!thought) return;\n    axios\n      .post('/api/thoughts/create', { thought })\n      .then(res => this.setState({ thoughts: [...this.state.thoughts, res.data.newThought] }))\n      .catch(err => alert(`Failed to create thought\\n${JSON.stringify(err)}`));\n  };\n\n  deleteThoughts = () => {\n    const doDelete = window.confirm('Delete all Thoughts?');\n    if (!doDelete) return;\n    axios\n      .delete('/api/thoughts/')\n      .then(res => this.setState({ thoughts: [] }))\n      .catch(err => alert(`Failed to delete all thoughts\\n${JSON.stringify(err)}`));\n  };\n\n  seedThoughts = () => {\n    const doSeed = window.confirm('Do you want to seed random data?');\n    if (!doSeed) return;\n    axios\n      .post('/api/thoughts/seed', {})\n      .then(() => {\n        axios\n          .get('/api/thoughts/')\n          .then(res => this.setState({ thoughts: res.data }))\n          .catch(alert);\n      })\n      .catch(alert);\n  };\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}